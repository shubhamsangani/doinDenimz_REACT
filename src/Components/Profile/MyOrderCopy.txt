import React, { useEffect, useState } from "react";
import {
  Collapse,
  Button,
  Card,
  Typography,
  CardBody,
  Chip,
} from "@material-tailwind/react";
import { useLocation, useNavigate } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import { FetchAPI, orderCartHistoryAPI, orderAddressAPI } from "../../api";
import { STATUSES, clearCartItem, fetchCart, setOrder } from "../../store/APISlice";
import Skeleton from "react-loading-skeleton";
import { format } from "date-fns";
import { FaMobile } from "react-icons/fa6";
import { BsTelephoneFill } from "react-icons/bs";

function MyOrders() {
  const dispatch = useDispatch()
  const [orderAddress, setOrderAddress] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [addressLoading, setAddressLoading] = useState(false);
  const userInfo = JSON.parse(localStorage.getItem("userInfo"));
  const { order } = useSelector((state) => state.API);
  const { imgBaseURL } = useSelector((state) => state.denim);
  const [open, setOpen] = useState(-1);
  const [cartHistory, setCartHistory] = useState([]);
  console.log("ðŸš€ ~ MyOrders ~ cartHistory:", cartHistory)

  const toggleOpen = async (cartID, value) => {
    setOpen((prevOpen) => (prevOpen === value ? -1 : value));
    if (open === value) {
      return;
    }

    setAddressLoading(true);
    try {
      const { data } = await FetchAPI(orderAddressAPI(), "POST", {
        cart_id: cartID,
      });
      setOrderAddress(data.Data);
    } catch (error) {
      console.log("Error in orderAddress API", error);
    } finally {
      setAddressLoading(false);
    }
  };

  const TABLE_HEAD = [
    "Order ID",
    "Product Info",
    "Quntity",
    "Subtotal",
    "Order Status",
    "Order Date",
  ];

  const orderArray = Array.isArray(order) ? order : [];
  // Sort the order array based on Order Date
  let sortedOrder = [...orderArray]?.sort((a, b) => {
    const dateA = new Date(a.product_cart_register_date_at);
    const dateB = new Date(b.product_cart_register_date_at);

    return dateB - dateA;
  });

  //Cart History API
  const orderCartHistory = async () => {
    setIsLoading(true);
    try {
      const { data } = await FetchAPI(orderCartHistoryAPI(), "POST", {
        user_id: userInfo?.id,
      });
      setCartHistory(data.Data)
    } catch (error) {
      console.log("Error in orderCartHistory API", error);
    } finally {
      setIsLoading(false);
    }
  };
  useEffect(() => {
    orderCartHistory();
  }, [])

  const cartOrderArray = Array.isArray(cartHistory) ? cartHistory : [];

   // Sort the order array based on Order Date
   let sortedCartOrder = [...cartOrderArray]?.sort((a, b) => {
    const dateA = new Date(a.cart_register_date_at);
    const dateB = new Date(b.cart_register_date_at);

    return dateB - dateA;
  });

  return (
    <div>
      {/* ======================= Heading ======================= */}
      <div className="text-center">
        <h4 className="text-gray-800 text-lg font-semibold ">My Orders</h4>
        <p className="text-gray-500 text-sm md:text-base md:w-[90%] xl:w-[80%] mx-auto mt-2">
          "MY ORDERS" provides a comprehensive overview of your past purchases,
          allowing you to track and manage your order history effortlessly. From
          tracking shipments to accessing order details and invoices,
          conveniently stay updated on your purchases and manage your shopping
          experience efficiently.
        </p>
      </div>

      <div className="overflow-x-auto">
        <table className="w-full table-auto text-left mt-8">
          <thead>
            <tr>
              {TABLE_HEAD.map((head, index) => (
                <th
                  key={head}
                  className={`border-b border-blue-gray-100 p-4 text-center ${
                    index === 1 ? "min-w-[18rem]" : ""
                  }`}
                >
                  <div className="font-medium text-gray-500">{head}</div>
                </th>
              ))}
            </tr>
          </thead>
          <tbody>
            {isLoading ? (
              <tr className="p-4">
                <td>
                  <Skeleton count={1} width={100} />
                </td>
                <td>
                  <div className="flex items-center">
                    <Skeleton width={70} height={80} className="me-3" />
                    <Skeleton count={3} width={200} />
                  </div>
                </td>
                <td>
                  <Skeleton count={1} width={100} />
                </td>
                <td>
                  <Skeleton count={1} width={100} />
                </td>
                <td>
                  <Skeleton count={1} width={100} />
                </td>
                <td>
                  <Skeleton count={1} width={150} />
                </td>
              </tr>
            ) : order?.length > 0 ? (
              sortedOrder.map((item, index) => {
                const isLast = index === order.length - 1;
                const classes = isLast
                  ? "p-4"
                  : "p-4 border-b border-blue-gray-50";

                // Extract the last 5 characters
                const orderID = item.product_cart_id.slice(-7);

                const isoString = item.product_cart_register_date_at;
                const date = new Date(isoString);

                return (
                  <>
                    <tr
                      key={index}
                      onClick={() => toggleOpen(item.cart_id, index)}
                      className="cursor-pointer"
                    >
                      {/* ======================= Order ID ======================= */}
                      <td className={classes}>
                        <div className="font-normal">#{orderID}</div>
                      </td>
                      {/* ======================= Product Info ======================= */}
                      <td className={classes}>
                        <div className="font-normal flex items-center">
                          <img
                            src={`${imgBaseURL}${item.product_image_1}`}
                            alt=""
                            className="w-[70px] h-[80px] rounded border border-gray-300"
                          />
                          <div className="ps-2 text-sm">
                            <h6 className="text-base ">{item.product_name}</h6>
                            <p className="text-gray-500">
                              Size: {item.product_size}
                            </p>
                            <p className="text-gray-500">
                              Color: {item.product_color}
                            </p>
                          </div>
                        </div>
                      </td>
                      {/* ======================= Quantity ======================= */}
                      <td className={classes}>
                        <div className="font-normal text-base text-center">
                          {item.quantity}
                        </div>
                      </td>
                      {/* ======================= Subtotal ======================= */}
                      <td className={classes}>
                        <div className="font-normal text-base text-center">
                          <span className=" text-black">
                            â‚¹{item.product_total_price}
                          </span>
                        </div>
                      </td>
                      {/* ======================= Status ======================= */}
                      <td className={classes}>
                        <Chip
                          variant="ghost"
                          color={
                            item.order_status === "Completed"
                              ? "green"
                              : item.order_status === "Processing"
                              ? "amber"
                              : item.order_status === "Pending"
                              ? "yellow"
                              : item.order_status === "Dispatched"
                              ? "blue"
                              : item.order_status === "Cancelled"
                              ? "red"
                              : item.order_status === "Shipped"
                              ? "deep-purple"
                              : "brown"
                          }
                          size="sm"
                          value={item.order_status}
                          className="text-center"
                        />
                      </td>
                      {/* ======================= Order Date ======================= */}
                      <td className={classes}>
                        <div className="font-normal text-sm">
                          {format(date, "dd/MM/yyyy")}
                        </div>
                      </td>
                      <td>
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          fill="none"
                          viewBox="0 0 24 24"
                          strokeWidth={2}
                          stroke="currentColor"
                          className={`${
                            index === open ? "rotate-180" : ""
                          } h-5 w-5 transition-transform`}
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            d="M19.5 8.25l-7.5 7.5-7.5-7.5"
                          />
                        </svg>
                      </td>
                    </tr>

                    <tr>
                      <td colSpan={6}>
                        <Collapse open={open === index}>
                          <Card className="my-4 mx-auto ">
                            {addressLoading ? (
                              <div className="loader-container-orderAdress">
                                <span className="loader"></span>
                              </div>
                            ) : (
                              <CardBody>
                                <h6 className="text-lg font-semibold mb-2">
                                  Delivery Address
                                </h6>
                                <p className="font-medium">
                                  {
                                    orderAddress[0]?.billing_address[0]
                                      ?.first_name
                                  }
                                  &nbsp;
                                  {
                                    orderAddress[0]?.billing_address[0]
                                      ?.last_name
                                  }
                                </p>
                                <p>
                                  {orderAddress[0]?.billing_address[0]?.address}
                                  ,&nbsp;
                                  {orderAddress[0]?.billing_address[0]?.city}
                                  ,&nbsp;
                                </p>
                                <p>
                                  {orderAddress[0]?.billing_address[0]?.state}
                                  ,&nbsp;
                                  {orderAddress[0]?.billing_address[0]?.country}
                                  -&nbsp;
                                  {orderAddress[0]?.billing_address[0]?.zipcode}
                                </p>
                                <p className="flex items-center ">
                                  <span className="flex items-center">
                                    <FaMobile className="me-2" />
                                    {
                                      orderAddress[0]?.billing_address[0]
                                        .mobile_no
                                    }
                                  </span>
                                  {orderAddress[0]?.billing_address[0]
                                    .phone_no && (
                                    <span className="flex items-center ms-4">
                                      <BsTelephoneFill className="me-2" />
                                      {
                                        orderAddress[0]?.billing_address[0]
                                          .phone_no
                                      }
                                    </span>
                                  )}
                                </p>
                              </CardBody>
                            )}
                          </Card>
                        </Collapse>
                      </td>
                    </tr>
                  </>
                );
              })
            ) : (
              <tr className="mt-12">
                <td colSpan={6} className="text-center">
                  <p className="text-gray-700 text-2xl md:text-3xl mt-4">
                    No Order Found
                  </p>
                  <p className="text-gray-500 text-lg md:text-xl mt-2">
                    Looks like you haven't made your order yet
                  </p>
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}

export default MyOrders;

=========================================================================================

import React, { useEffect, useState } from "react";
import {
  Collapse,
  Button,
  Card,
  Typography,
  CardBody,
  Chip,
} from "@material-tailwind/react";
import { useLocation, useNavigate } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import { FetchAPI, orderCartHistoryAPI, orderAddressAPI } from "../../api";
import {
  STATUSES,
  clearCartItem,
  fetchCart,
  setOrder,
} from "../../store/APISlice";
import Skeleton from "react-loading-skeleton";
import { format } from "date-fns";
import { FaMobile } from "react-icons/fa6";
import { BsTelephoneFill } from "react-icons/bs";

function MyOrders() {
  const dispatch = useDispatch();
  const [orderAddress, setOrderAddress] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [addressLoading, setAddressLoading] = useState(false);
  const userInfo = JSON.parse(localStorage.getItem("userInfo"));
  const { order } = useSelector((state) => state.API);
  const { imgBaseURL } = useSelector((state) => state.denim);
  const [open, setOpen] = useState(-1);
  const [cartHistory, setCartHistory] = useState([]);
  console.log("ðŸš€ ~ MyOrders ~ cartHistory:", cartHistory);

  const toggleOpen = async (cartID, value) => {
    setOpen((prevOpen) => (prevOpen === value ? -1 : value));
    if (open === value) {
      return;
    }

    setAddressLoading(true);
    try {
      const { data } = await FetchAPI(orderAddressAPI(), "POST", {
        cart_id: cartID,
      });
      setOrderAddress(data.Data);
    } catch (error) {
      console.log("Error in orderAddress API", error);
    } finally {
      setAddressLoading(false);
    }
  };

  const TABLE_HEAD = [
    "Order ID",
    "Product Info",
    "Quntity",
    "Subtotal",
    "Order Status",
    "Order Date",
  ];

  const orderArray = Array.isArray(order) ? order : [];
  // Sort the order array based on Order Date
  let sortedOrder = [...orderArray]?.sort((a, b) => {
    const dateA = new Date(a.product_cart_register_date_at);
    const dateB = new Date(b.product_cart_register_date_at);

    return dateB - dateA;
  });

  //Cart History API
  const orderCartHistory = async () => {
    setIsLoading(true);
    try {
      const { data } = await FetchAPI(orderCartHistoryAPI(), "POST", {
        user_id: userInfo?.id,
      });
      setCartHistory(data.Data);
    } catch (error) {
      console.log("Error in orderCartHistory API", error);
    } finally {
      setIsLoading(false);
    }
  };
  useEffect(() => {
    orderCartHistory();
  }, []);

  const cartOrderArray = Array.isArray(cartHistory) ? cartHistory : [];

  // Sort the order array based on Order Date
  let sortedCartOrder = [...cartOrderArray]?.sort((a, b) => {
    const dateA = new Date(a.cart_register_date_at);
    const dateB = new Date(b.cart_register_date_at);

    return dateB - dateA;
  });

  return (
    <div>
      {/* ======================= Heading ======================= */}
      <div className="text-center">
        <h4 className="text-gray-800 text-lg font-semibold ">My Orders</h4>
        <p className="text-gray-500 text-sm md:text-base md:w-[90%] xl:w-[80%] mx-auto mt-2">
          "MY ORDERS" provides a comprehensive overview of your past purchases,
          allowing you to track and manage your order history effortlessly. From
          tracking shipments to accessing order details and invoices,
          conveniently stay updated on your purchases and manage your shopping
          experience efficiently.
        </p>
      </div>

      <div className="mt-8">
        {sortedCartOrder.map((item, index) => {
          const isoString = item.cart_register_date_at;
          const date = new Date(isoString);
          return (
            <div className="bg-gray-50 mt-4 rounded">
              <div className="p-5 grid grid-cols-12 gap-4">
                {/* Order History */}
                <div className="col-span-7">
                  <div className="mb-2">
                    <div className="text-[15px]">
                      <span className="text-gray-700">Order Date:</span>
                      <span className="ps-2 font-medium"> {format(date, "dd/MM/yyyy")}</span>
                    </div>
                    <div className="mt-1 text-sm">
                      <span className="text-gray-700">Order ID:</span>
                      <span className="ps-2"> {item.cart_id}</span>
                    </div>

                  </div>
                  {item.items.map((item, index) => {
                    return (
                      <div key={index} className="mt-2">
                        <hr className="bg-gray-200 h-[2px]" />
                        <div className="font-normal flex items-center mt-2">
                          <img
                            src={`${imgBaseURL}${item.product_image}`}
                            alt=""
                            className="w-[80px] h-[90px] rounded border border-gray-300"
                          />
                          <div className="ps-2 text-sm">
                            <h6 className="text-[15px] ">{item.Productdetails[0].product_name}</h6>
                            {/* <h6 className="text-base ">
                              Men Relaxed Fit Light Fade Stretchable Jeans
                            </h6> */}
                            <p className="text-gray-500">
                              Size: {item.product_size}
                            </p>
                            <p className="text-gray-500">
                              Color: {item.Productdetails[0].product_color}
                            </p>
                            <p className="text-gray-500">
                              Qty: {item.quantity}
                            </p>
                          </div>
                        </div>
                        <div className="mt-2 flex items-center text-[15px]">
                          <span className="text-gray-700">Order Status:</span>
                          <Chip
                            variant="ghost"
                            color={
                              item.order_status === "Completed"
                                ? "green"
                                : item.order_status === "Processing"
                                ? "amber"
                                : item.order_status === "Pending"
                                ? "yellow"
                                : item.order_status === "Dispatched"
                                ? "blue"
                                : item.order_status === "Cancelled"
                                ? "red"
                                : item.order_status === "Shipped"
                                ? "deep-purple"
                                : "brown"
                            }
                            size="sm"
                            value={item.order_status}
                            className="text-center ms-2"
                          />
                        </div>
                      </div>
                    );
                  })}
                </div>

                {/* Total and Address */}
                <div className="col-span-5">
                  <div className="flex justify-between">
                    <div className="text-[15px]">
                      <p className=" text-gray-700">Sub Amount:</p>
                      <p className=" mt-1 text-gray-700">
                        Promocode Discount:
                      </p>
                      <p className=" mt-1 text-gray-700">
                        Shipping Charge:
                      </p>
                      <p className=" mt-1 text-gray-700">
                        Total Order Price:
                      </p>
                    </div>
                    <div className="text-[15px]">
                      <p className="">â‚¹ {item.sub_amount}</p>
                      <p className="mt-1 text-green-800">
                        - â‚¹ {item.promocode_amount}
                      </p>
                      <p className="mt-1 text-[#003060]">
                        + â‚¹ {item.shipping_charge}
                      </p>
                      <p className="mt-1">â‚¹ {item.total_amount}</p>
                    </div>
                  </div>
                  {/* Address */}
                  <div className="mt-3 text-[15px]">
                    <p className="font-medium text-gray-900">
                      Delivery Address:
                    </p>
                    <div className="text-gray-700">
                      <p className="font-medium text-gray-900">
                        {item.billing_address[0]?.first_name}
                        &nbsp;
                        {item.billing_address[0]?.last_name}
                      </p>
                      <p>
                        {item.billing_address[0]?.address}
                        ,&nbsp;
                        {item.billing_address[0]?.city}
                        ,&nbsp;
                      </p>
                      <p>
                        {item.billing_address[0]?.state}
                        ,&nbsp;
                        {item.billing_address[0]?.country}
                        -&nbsp;
                        {item.billing_address[0]?.zipcode}
                      </p>
                      <p className="flex items-center ">
                        <span className="flex items-center">
                          <FaMobile className="me-2" />
                          {item.billing_address[0].mobile_no}
                        </span>
                        {item.billing_address[0].phone_no && (
                          <span className="flex items-center ms-4">
                            <BsTelephoneFill className="me-2" />
                            {item.billing_address[0].phone_no}
                          </span>
                        )}
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
}

export default MyOrders;
